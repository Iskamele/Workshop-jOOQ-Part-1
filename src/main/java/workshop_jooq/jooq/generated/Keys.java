/*
 * This file is generated by jOOQ.
 */
package jooq.generated;


import jooq.generated.tables.Address;
import jooq.generated.tables.Broker;
import jooq.generated.tables.BrokerDegree;
import jooq.generated.tables.DegreeBefore;
import jooq.generated.tables.Email;
import jooq.generated.tables.Gis;
import jooq.generated.tables.Image;
import jooq.generated.tables.Office;
import jooq.generated.tables.PhoneNumber;
import jooq.generated.tables.Property;
import jooq.generated.tables.records.AddressRecord;
import jooq.generated.tables.records.BrokerDegreeRecord;
import jooq.generated.tables.records.BrokerRecord;
import jooq.generated.tables.records.DegreeBeforeRecord;
import jooq.generated.tables.records.EmailRecord;
import jooq.generated.tables.records.GisRecord;
import jooq.generated.tables.records.ImageRecord;
import jooq.generated.tables.records.OfficeRecord;
import jooq.generated.tables.records.PhoneNumberRecord;
import jooq.generated.tables.records.PropertyRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AddressRecord> ADDRESS_PKEY = Internal.createUniqueKey(Address.ADDRESS, DSL.name("address_pkey"), new TableField[] { Address.ADDRESS.ID }, true);
    public static final UniqueKey<BrokerRecord> BROKER_PKEY = Internal.createUniqueKey(Broker.BROKER, DSL.name("broker_pkey"), new TableField[] { Broker.BROKER.ID }, true);
    public static final UniqueKey<BrokerDegreeRecord> BROKER_DEGREE_PKEY = Internal.createUniqueKey(BrokerDegree.BROKER_DEGREE, DSL.name("broker_degree_pkey"), new TableField[] { BrokerDegree.BROKER_DEGREE.BROKER_ID, BrokerDegree.BROKER_DEGREE.DEGREE_NAME }, true);
    public static final UniqueKey<DegreeBeforeRecord> DEGREE_BEFORE_PKEY = Internal.createUniqueKey(DegreeBefore.DEGREE_BEFORE, DSL.name("degree_before_pkey"), new TableField[] { DegreeBefore.DEGREE_BEFORE.NAME }, true);
    public static final UniqueKey<EmailRecord> EMAIL_PKEY = Internal.createUniqueKey(Email.EMAIL, DSL.name("email_pkey"), new TableField[] { Email.EMAIL.ID }, true);
    public static final UniqueKey<GisRecord> GIS_PKEY = Internal.createUniqueKey(Gis.GIS, DSL.name("gis_pkey"), new TableField[] { Gis.GIS.ID }, true);
    public static final UniqueKey<ImageRecord> IMAGE_PKEY = Internal.createUniqueKey(Image.IMAGE, DSL.name("image_pkey"), new TableField[] { Image.IMAGE.ID }, true);
    public static final UniqueKey<OfficeRecord> OFFICE_PKEY = Internal.createUniqueKey(Office.OFFICE, DSL.name("office_pkey"), new TableField[] { Office.OFFICE.ID }, true);
    public static final UniqueKey<PhoneNumberRecord> PHONE_NUMBER_PKEY = Internal.createUniqueKey(PhoneNumber.PHONE_NUMBER, DSL.name("phone_number_pkey"), new TableField[] { PhoneNumber.PHONE_NUMBER.ID }, true);
    public static final UniqueKey<PropertyRecord> PROPERTY_PKEY = Internal.createUniqueKey(Property.PROPERTY, DSL.name("property_pkey"), new TableField[] { Property.PROPERTY.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AddressRecord, GisRecord> ADDRESS__FK_ADDRESS_GIS = Internal.createForeignKey(Address.ADDRESS, DSL.name("fk_address_gis"), new TableField[] { Address.ADDRESS.GIS_ID }, Keys.GIS_PKEY, new TableField[] { Gis.GIS.ID }, true);
    public static final ForeignKey<BrokerRecord, OfficeRecord> BROKER__BROKER_OFFICE_ID_FKEY = Internal.createForeignKey(Broker.BROKER, DSL.name("broker_office_id_fkey"), new TableField[] { Broker.BROKER.OFFICE_ID }, Keys.OFFICE_PKEY, new TableField[] { Office.OFFICE.ID }, true);
    public static final ForeignKey<BrokerDegreeRecord, BrokerRecord> BROKER_DEGREE__BROKER_DEGREE_BROKER_ID_FKEY = Internal.createForeignKey(BrokerDegree.BROKER_DEGREE, DSL.name("broker_degree_broker_id_fkey"), new TableField[] { BrokerDegree.BROKER_DEGREE.BROKER_ID }, Keys.BROKER_PKEY, new TableField[] { Broker.BROKER.ID }, true);
    public static final ForeignKey<BrokerDegreeRecord, DegreeBeforeRecord> BROKER_DEGREE__BROKER_DEGREE_DEGREE_NAME_FKEY = Internal.createForeignKey(BrokerDegree.BROKER_DEGREE, DSL.name("broker_degree_degree_name_fkey"), new TableField[] { BrokerDegree.BROKER_DEGREE.DEGREE_NAME }, Keys.DEGREE_BEFORE_PKEY, new TableField[] { DegreeBefore.DEGREE_BEFORE.NAME }, true);
    public static final ForeignKey<EmailRecord, BrokerRecord> EMAIL__EMAIL_BROKER_ID_FKEY = Internal.createForeignKey(Email.EMAIL, DSL.name("email_broker_id_fkey"), new TableField[] { Email.EMAIL.BROKER_ID }, Keys.BROKER_PKEY, new TableField[] { Broker.BROKER.ID }, true);
    public static final ForeignKey<EmailRecord, OfficeRecord> EMAIL__EMAIL_OFFICE_ID_FKEY = Internal.createForeignKey(Email.EMAIL, DSL.name("email_office_id_fkey"), new TableField[] { Email.EMAIL.OFFICE_ID }, Keys.OFFICE_PKEY, new TableField[] { Office.OFFICE.ID }, true);
    public static final ForeignKey<ImageRecord, PropertyRecord> IMAGE__IMAGE_PROPERTY_ID_FKEY = Internal.createForeignKey(Image.IMAGE, DSL.name("image_property_id_fkey"), new TableField[] { Image.IMAGE.PROPERTY_ID }, Keys.PROPERTY_PKEY, new TableField[] { Property.PROPERTY.ID }, true);
    public static final ForeignKey<OfficeRecord, AddressRecord> OFFICE__OFFICE_ADDRESS_ID_FKEY = Internal.createForeignKey(Office.OFFICE, DSL.name("office_address_id_fkey"), new TableField[] { Office.OFFICE.ADDRESS_ID }, Keys.ADDRESS_PKEY, new TableField[] { Address.ADDRESS.ID }, true);
    public static final ForeignKey<PhoneNumberRecord, BrokerRecord> PHONE_NUMBER__PHONE_NUMBER_BROKER_ID_FKEY = Internal.createForeignKey(PhoneNumber.PHONE_NUMBER, DSL.name("phone_number_broker_id_fkey"), new TableField[] { PhoneNumber.PHONE_NUMBER.BROKER_ID }, Keys.BROKER_PKEY, new TableField[] { Broker.BROKER.ID }, true);
    public static final ForeignKey<PhoneNumberRecord, OfficeRecord> PHONE_NUMBER__PHONE_NUMBER_OFFICE_ID_FKEY = Internal.createForeignKey(PhoneNumber.PHONE_NUMBER, DSL.name("phone_number_office_id_fkey"), new TableField[] { PhoneNumber.PHONE_NUMBER.OFFICE_ID }, Keys.OFFICE_PKEY, new TableField[] { Office.OFFICE.ID }, true);
    public static final ForeignKey<PropertyRecord, AddressRecord> PROPERTY__PROPERTY_ADDRESS_ID_FKEY = Internal.createForeignKey(Property.PROPERTY, DSL.name("property_address_id_fkey"), new TableField[] { Property.PROPERTY.ADDRESS_ID }, Keys.ADDRESS_PKEY, new TableField[] { Address.ADDRESS.ID }, true);
    public static final ForeignKey<PropertyRecord, BrokerRecord> PROPERTY__PROPERTY_BROKER_ID_FKEY = Internal.createForeignKey(Property.PROPERTY, DSL.name("property_broker_id_fkey"), new TableField[] { Property.PROPERTY.BROKER_ID }, Keys.BROKER_PKEY, new TableField[] { Broker.BROKER.ID }, true);
    public static final ForeignKey<PropertyRecord, OfficeRecord> PROPERTY__PROPERTY_OFFICE_ID_FKEY = Internal.createForeignKey(Property.PROPERTY, DSL.name("property_office_id_fkey"), new TableField[] { Property.PROPERTY.OFFICE_ID }, Keys.OFFICE_PKEY, new TableField[] { Office.OFFICE.ID }, true);
}
