/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.Address.AddressPath;
import jooq.generated.tables.Broker.BrokerPath;
import jooq.generated.tables.Email.EmailPath;
import jooq.generated.tables.PhoneNumber.PhoneNumberPath;
import jooq.generated.tables.Property.PropertyPath;
import jooq.generated.tables.records.OfficeRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Office extends TableImpl<OfficeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.office</code>
     */
    public static final Office OFFICE = new Office();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfficeRecord> getRecordType() {
        return OfficeRecord.class;
    }

    /**
     * The column <code>public.office.id</code>.
     */
    public final TableField<OfficeRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.office.name</code>.
     */
    public final TableField<OfficeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.office.address_id</code>.
     */
    public final TableField<OfficeRecord, UUID> ADDRESS_ID = createField(DSL.name("address_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.office.isHidden</code>.
     */
    public final TableField<OfficeRecord, Boolean> ISHIDDEN = createField(DSL.name("isHidden"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.office.date_opening</code>.
     */
    public final TableField<OfficeRecord, LocalDate> DATE_OPENING = createField(DSL.name("date_opening"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.office.tags</code>.
     */
    public final TableField<OfficeRecord, String[]> TAGS = createField(DSL.name("tags"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.office.created_at</code>.
     */
    public final TableField<OfficeRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Office(Name alias, Table<OfficeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Office(Name alias, Table<OfficeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.office</code> table reference
     */
    public Office(String alias) {
        this(DSL.name(alias), OFFICE);
    }

    /**
     * Create an aliased <code>public.office</code> table reference
     */
    public Office(Name alias) {
        this(alias, OFFICE);
    }

    /**
     * Create a <code>public.office</code> table reference
     */
    public Office() {
        this(DSL.name("office"), null);
    }

    public <O extends Record> Office(Table<O> path, ForeignKey<O, OfficeRecord> childPath, InverseForeignKey<O, OfficeRecord> parentPath) {
        super(path, childPath, parentPath, OFFICE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OfficePath extends Office implements Path<OfficeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OfficePath(Table<O> path, ForeignKey<O, OfficeRecord> childPath, InverseForeignKey<O, OfficeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OfficePath(Name alias, Table<OfficeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OfficePath as(String alias) {
            return new OfficePath(DSL.name(alias), this);
        }

        @Override
        public OfficePath as(Name alias) {
            return new OfficePath(alias, this);
        }

        @Override
        public OfficePath as(Table<?> alias) {
            return new OfficePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<OfficeRecord> getPrimaryKey() {
        return Keys.OFFICE_PKEY;
    }

    @Override
    public List<ForeignKey<OfficeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OFFICE__OFFICE_ADDRESS_ID_FKEY);
    }

    private transient AddressPath _address;

    /**
     * Get the implicit join path to the <code>public.address</code> table.
     */
    public AddressPath address() {
        if (_address == null)
            _address = new AddressPath(this, Keys.OFFICE__OFFICE_ADDRESS_ID_FKEY, null);

        return _address;
    }

    private transient BrokerPath _broker;

    /**
     * Get the implicit to-many join path to the <code>public.broker</code>
     * table
     */
    public BrokerPath broker() {
        if (_broker == null)
            _broker = new BrokerPath(this, null, Keys.BROKER__BROKER_OFFICE_ID_FKEY.getInverseKey());

        return _broker;
    }

    private transient EmailPath _email;

    /**
     * Get the implicit to-many join path to the <code>public.email</code> table
     */
    public EmailPath email() {
        if (_email == null)
            _email = new EmailPath(this, null, Keys.EMAIL__EMAIL_OFFICE_ID_FKEY.getInverseKey());

        return _email;
    }

    private transient PhoneNumberPath _phoneNumber;

    /**
     * Get the implicit to-many join path to the
     * <code>public.phone_number</code> table
     */
    public PhoneNumberPath phoneNumber() {
        if (_phoneNumber == null)
            _phoneNumber = new PhoneNumberPath(this, null, Keys.PHONE_NUMBER__PHONE_NUMBER_OFFICE_ID_FKEY.getInverseKey());

        return _phoneNumber;
    }

    private transient PropertyPath _property;

    /**
     * Get the implicit to-many join path to the <code>public.property</code>
     * table
     */
    public PropertyPath property() {
        if (_property == null)
            _property = new PropertyPath(this, null, Keys.PROPERTY__PROPERTY_OFFICE_ID_FKEY.getInverseKey());

        return _property;
    }

    @Override
    public Office as(String alias) {
        return new Office(DSL.name(alias), this);
    }

    @Override
    public Office as(Name alias) {
        return new Office(alias, this);
    }

    @Override
    public Office as(Table<?> alias) {
        return new Office(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Office rename(String name) {
        return new Office(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Office rename(Name name) {
        return new Office(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Office rename(Table<?> name) {
        return new Office(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Office where(Condition condition) {
        return new Office(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Office where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Office where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Office where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Office where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Office where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Office where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Office where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Office whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Office whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
