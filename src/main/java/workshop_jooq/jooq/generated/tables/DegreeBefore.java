/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Collection;

import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.Broker.BrokerPath;
import jooq.generated.tables.BrokerDegree.BrokerDegreePath;
import jooq.generated.tables.records.DegreeBeforeRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DegreeBefore extends TableImpl<DegreeBeforeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.degree_before</code>
     */
    public static final DegreeBefore DEGREE_BEFORE = new DegreeBefore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DegreeBeforeRecord> getRecordType() {
        return DegreeBeforeRecord.class;
    }

    /**
     * The column <code>public.degree_before.name</code>.
     */
    public final TableField<DegreeBeforeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.degree_before.text</code>.
     */
    public final TableField<DegreeBeforeRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB.nullable(false), this, "");

    private DegreeBefore(Name alias, Table<DegreeBeforeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DegreeBefore(Name alias, Table<DegreeBeforeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.degree_before</code> table reference
     */
    public DegreeBefore(String alias) {
        this(DSL.name(alias), DEGREE_BEFORE);
    }

    /**
     * Create an aliased <code>public.degree_before</code> table reference
     */
    public DegreeBefore(Name alias) {
        this(alias, DEGREE_BEFORE);
    }

    /**
     * Create a <code>public.degree_before</code> table reference
     */
    public DegreeBefore() {
        this(DSL.name("degree_before"), null);
    }

    public <O extends Record> DegreeBefore(Table<O> path, ForeignKey<O, DegreeBeforeRecord> childPath, InverseForeignKey<O, DegreeBeforeRecord> parentPath) {
        super(path, childPath, parentPath, DEGREE_BEFORE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DegreeBeforePath extends DegreeBefore implements Path<DegreeBeforeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DegreeBeforePath(Table<O> path, ForeignKey<O, DegreeBeforeRecord> childPath, InverseForeignKey<O, DegreeBeforeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DegreeBeforePath(Name alias, Table<DegreeBeforeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DegreeBeforePath as(String alias) {
            return new DegreeBeforePath(DSL.name(alias), this);
        }

        @Override
        public DegreeBeforePath as(Name alias) {
            return new DegreeBeforePath(alias, this);
        }

        @Override
        public DegreeBeforePath as(Table<?> alias) {
            return new DegreeBeforePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DegreeBeforeRecord> getPrimaryKey() {
        return Keys.DEGREE_BEFORE_PKEY;
    }

    private transient BrokerDegreePath _brokerDegree;

    /**
     * Get the implicit to-many join path to the
     * <code>public.broker_degree</code> table
     */
    public BrokerDegreePath brokerDegree() {
        if (_brokerDegree == null)
            _brokerDegree = new BrokerDegreePath(this, null, Keys.BROKER_DEGREE__BROKER_DEGREE_DEGREE_NAME_FKEY.getInverseKey());

        return _brokerDegree;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.broker</code>
     * table
     */
    public BrokerPath broker() {
        return brokerDegree().broker();
    }

    @Override
    public DegreeBefore as(String alias) {
        return new DegreeBefore(DSL.name(alias), this);
    }

    @Override
    public DegreeBefore as(Name alias) {
        return new DegreeBefore(alias, this);
    }

    @Override
    public DegreeBefore as(Table<?> alias) {
        return new DegreeBefore(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DegreeBefore rename(String name) {
        return new DegreeBefore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DegreeBefore rename(Name name) {
        return new DegreeBefore(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DegreeBefore rename(Table<?> name) {
        return new DegreeBefore(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DegreeBefore where(Condition condition) {
        return new DegreeBefore(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DegreeBefore where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DegreeBefore where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DegreeBefore where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DegreeBefore where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DegreeBefore where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DegreeBefore where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DegreeBefore where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DegreeBefore whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DegreeBefore whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
