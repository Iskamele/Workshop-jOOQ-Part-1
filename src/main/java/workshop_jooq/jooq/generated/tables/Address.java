/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import jooq.generated.Indexes;
import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.Gis.GisPath;
import jooq.generated.tables.Office.OfficePath;
import jooq.generated.tables.Property.PropertyPath;
import jooq.generated.tables.records.AddressRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Address extends TableImpl<AddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.address</code>
     */
    public static final Address ADDRESS = new Address();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressRecord> getRecordType() {
        return AddressRecord.class;
    }

    /**
     * The column <code>public.address.id</code>.
     */
    public final TableField<AddressRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.address.country</code>.
     */
    public final TableField<AddressRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.address.city</code>.
     */
    public final TableField<AddressRecord, String> CITY = createField(DSL.name("city"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.address.street</code>.
     */
    public final TableField<AddressRecord, String> STREET = createField(DSL.name("street"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.address.number</code>.
     */
    public final TableField<AddressRecord, Integer> NUMBER = createField(DSL.name("number"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.address.gis_id</code>.
     */
    public final TableField<AddressRecord, UUID> GIS_ID = createField(DSL.name("gis_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.address.created_at</code>.
     */
    public final TableField<AddressRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Address(Name alias, Table<AddressRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Address(Name alias, Table<AddressRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.address</code> table reference
     */
    public Address(String alias) {
        this(DSL.name(alias), ADDRESS);
    }

    /**
     * Create an aliased <code>public.address</code> table reference
     */
    public Address(Name alias) {
        this(alias, ADDRESS);
    }

    /**
     * Create a <code>public.address</code> table reference
     */
    public Address() {
        this(DSL.name("address"), null);
    }

    public <O extends Record> Address(Table<O> path, ForeignKey<O, AddressRecord> childPath, InverseForeignKey<O, AddressRecord> parentPath) {
        super(path, childPath, parentPath, ADDRESS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AddressPath extends Address implements Path<AddressRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AddressPath(Table<O> path, ForeignKey<O, AddressRecord> childPath, InverseForeignKey<O, AddressRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AddressPath(Name alias, Table<AddressRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AddressPath as(String alias) {
            return new AddressPath(DSL.name(alias), this);
        }

        @Override
        public AddressPath as(Name alias) {
            return new AddressPath(alias, this);
        }

        @Override
        public AddressPath as(Table<?> alias) {
            return new AddressPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_ADDRESS_GIS_ID);
    }

    @Override
    public UniqueKey<AddressRecord> getPrimaryKey() {
        return Keys.ADDRESS_PKEY;
    }

    @Override
    public List<ForeignKey<AddressRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ADDRESS__FK_ADDRESS_GIS);
    }

    private transient GisPath _gis;

    /**
     * Get the implicit join path to the <code>public.gis</code> table.
     */
    public GisPath gis() {
        if (_gis == null)
            _gis = new GisPath(this, Keys.ADDRESS__FK_ADDRESS_GIS, null);

        return _gis;
    }

    private transient OfficePath _office;

    /**
     * Get the implicit to-many join path to the <code>public.office</code>
     * table
     */
    public OfficePath office() {
        if (_office == null)
            _office = new OfficePath(this, null, Keys.OFFICE__OFFICE_ADDRESS_ID_FKEY.getInverseKey());

        return _office;
    }

    private transient PropertyPath _property;

    /**
     * Get the implicit to-many join path to the <code>public.property</code>
     * table
     */
    public PropertyPath property() {
        if (_property == null)
            _property = new PropertyPath(this, null, Keys.PROPERTY__PROPERTY_ADDRESS_ID_FKEY.getInverseKey());

        return _property;
    }

    @Override
    public Address as(String alias) {
        return new Address(DSL.name(alias), this);
    }

    @Override
    public Address as(Name alias) {
        return new Address(alias, this);
    }

    @Override
    public Address as(Table<?> alias) {
        return new Address(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(String name) {
        return new Address(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(Name name) {
        return new Address(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(Table<?> name) {
        return new Address(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Address where(Condition condition) {
        return new Address(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Address where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Address where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Address where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Address where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Address where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Address where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Address where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Address whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Address whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
