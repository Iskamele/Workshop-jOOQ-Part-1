/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import jooq.generated.Indexes;
import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.BrokerDegree.BrokerDegreePath;
import jooq.generated.tables.DegreeBefore.DegreeBeforePath;
import jooq.generated.tables.Email.EmailPath;
import jooq.generated.tables.Office.OfficePath;
import jooq.generated.tables.PhoneNumber.PhoneNumberPath;
import jooq.generated.tables.Property.PropertyPath;
import jooq.generated.tables.records.BrokerRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Broker extends TableImpl<BrokerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.broker</code>
     */
    public static final Broker BROKER = new Broker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BrokerRecord> getRecordType() {
        return BrokerRecord.class;
    }

    /**
     * The column <code>public.broker.id</code>.
     */
    public final TableField<BrokerRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.broker.first_name</code>.
     */
    public final TableField<BrokerRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.broker.last_name</code>.
     */
    public final TableField<BrokerRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.broker.office_id</code>.
     */
    public final TableField<BrokerRecord, UUID> OFFICE_ID = createField(DSL.name("office_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.broker.is_mls</code>.
     */
    public final TableField<BrokerRecord, Boolean> IS_MLS = createField(DSL.name("is_mls"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.broker.created_at</code>.
     */
    public final TableField<BrokerRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Broker(Name alias, Table<BrokerRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Broker(Name alias, Table<BrokerRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.broker</code> table reference
     */
    public Broker(String alias) {
        this(DSL.name(alias), BROKER);
    }

    /**
     * Create an aliased <code>public.broker</code> table reference
     */
    public Broker(Name alias) {
        this(alias, BROKER);
    }

    /**
     * Create a <code>public.broker</code> table reference
     */
    public Broker() {
        this(DSL.name("broker"), null);
    }

    public <O extends Record> Broker(Table<O> path, ForeignKey<O, BrokerRecord> childPath, InverseForeignKey<O, BrokerRecord> parentPath) {
        super(path, childPath, parentPath, BROKER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BrokerPath extends Broker implements Path<BrokerRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BrokerPath(Table<O> path, ForeignKey<O, BrokerRecord> childPath, InverseForeignKey<O, BrokerRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BrokerPath(Name alias, Table<BrokerRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BrokerPath as(String alias) {
            return new BrokerPath(DSL.name(alias), this);
        }

        @Override
        public BrokerPath as(Name alias) {
            return new BrokerPath(alias, this);
        }

        @Override
        public BrokerPath as(Table<?> alias) {
            return new BrokerPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_BROKER_OFFICE_ID);
    }

    @Override
    public UniqueKey<BrokerRecord> getPrimaryKey() {
        return Keys.BROKER_PKEY;
    }

    @Override
    public List<ForeignKey<BrokerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BROKER__BROKER_OFFICE_ID_FKEY);
    }

    private transient OfficePath _office;

    /**
     * Get the implicit join path to the <code>public.office</code> table.
     */
    public OfficePath office() {
        if (_office == null)
            _office = new OfficePath(this, Keys.BROKER__BROKER_OFFICE_ID_FKEY, null);

        return _office;
    }

    private transient BrokerDegreePath _brokerDegree;

    /**
     * Get the implicit to-many join path to the
     * <code>public.broker_degree</code> table
     */
    public BrokerDegreePath brokerDegree() {
        if (_brokerDegree == null)
            _brokerDegree = new BrokerDegreePath(this, null, Keys.BROKER_DEGREE__BROKER_DEGREE_BROKER_ID_FKEY.getInverseKey());

        return _brokerDegree;
    }

    private transient EmailPath _email;

    /**
     * Get the implicit to-many join path to the <code>public.email</code> table
     */
    public EmailPath email() {
        if (_email == null)
            _email = new EmailPath(this, null, Keys.EMAIL__EMAIL_BROKER_ID_FKEY.getInverseKey());

        return _email;
    }

    private transient PhoneNumberPath _phoneNumber;

    /**
     * Get the implicit to-many join path to the
     * <code>public.phone_number</code> table
     */
    public PhoneNumberPath phoneNumber() {
        if (_phoneNumber == null)
            _phoneNumber = new PhoneNumberPath(this, null, Keys.PHONE_NUMBER__PHONE_NUMBER_BROKER_ID_FKEY.getInverseKey());

        return _phoneNumber;
    }

    private transient PropertyPath _property;

    /**
     * Get the implicit to-many join path to the <code>public.property</code>
     * table
     */
    public PropertyPath property() {
        if (_property == null)
            _property = new PropertyPath(this, null, Keys.PROPERTY__PROPERTY_BROKER_ID_FKEY.getInverseKey());

        return _property;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.degree_before</code> table
     */
    public DegreeBeforePath degreeBefore() {
        return brokerDegree().degreeBefore();
    }

    @Override
    public Broker as(String alias) {
        return new Broker(DSL.name(alias), this);
    }

    @Override
    public Broker as(Name alias) {
        return new Broker(alias, this);
    }

    @Override
    public Broker as(Table<?> alias) {
        return new Broker(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Broker rename(String name) {
        return new Broker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Broker rename(Name name) {
        return new Broker(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Broker rename(Table<?> name) {
        return new Broker(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Broker where(Condition condition) {
        return new Broker(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Broker where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Broker where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Broker where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Broker where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Broker where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Broker where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Broker where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Broker whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Broker whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
