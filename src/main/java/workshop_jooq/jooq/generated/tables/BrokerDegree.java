/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.Broker.BrokerPath;
import jooq.generated.tables.DegreeBefore.DegreeBeforePath;
import jooq.generated.tables.records.BrokerDegreeRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BrokerDegree extends TableImpl<BrokerDegreeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.broker_degree</code>
     */
    public static final BrokerDegree BROKER_DEGREE = new BrokerDegree();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BrokerDegreeRecord> getRecordType() {
        return BrokerDegreeRecord.class;
    }

    /**
     * The column <code>public.broker_degree.broker_id</code>.
     */
    public final TableField<BrokerDegreeRecord, UUID> BROKER_ID = createField(DSL.name("broker_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.broker_degree.degree_name</code>.
     */
    public final TableField<BrokerDegreeRecord, String> DEGREE_NAME = createField(DSL.name("degree_name"), SQLDataType.CLOB.nullable(false), this, "");

    private BrokerDegree(Name alias, Table<BrokerDegreeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BrokerDegree(Name alias, Table<BrokerDegreeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.broker_degree</code> table reference
     */
    public BrokerDegree(String alias) {
        this(DSL.name(alias), BROKER_DEGREE);
    }

    /**
     * Create an aliased <code>public.broker_degree</code> table reference
     */
    public BrokerDegree(Name alias) {
        this(alias, BROKER_DEGREE);
    }

    /**
     * Create a <code>public.broker_degree</code> table reference
     */
    public BrokerDegree() {
        this(DSL.name("broker_degree"), null);
    }

    public <O extends Record> BrokerDegree(Table<O> path, ForeignKey<O, BrokerDegreeRecord> childPath, InverseForeignKey<O, BrokerDegreeRecord> parentPath) {
        super(path, childPath, parentPath, BROKER_DEGREE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BrokerDegreePath extends BrokerDegree implements Path<BrokerDegreeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BrokerDegreePath(Table<O> path, ForeignKey<O, BrokerDegreeRecord> childPath, InverseForeignKey<O, BrokerDegreeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BrokerDegreePath(Name alias, Table<BrokerDegreeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BrokerDegreePath as(String alias) {
            return new BrokerDegreePath(DSL.name(alias), this);
        }

        @Override
        public BrokerDegreePath as(Name alias) {
            return new BrokerDegreePath(alias, this);
        }

        @Override
        public BrokerDegreePath as(Table<?> alias) {
            return new BrokerDegreePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BrokerDegreeRecord> getPrimaryKey() {
        return Keys.BROKER_DEGREE_PKEY;
    }

    @Override
    public List<ForeignKey<BrokerDegreeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BROKER_DEGREE__BROKER_DEGREE_BROKER_ID_FKEY, Keys.BROKER_DEGREE__BROKER_DEGREE_DEGREE_NAME_FKEY);
    }

    private transient BrokerPath _broker;

    /**
     * Get the implicit join path to the <code>public.broker</code> table.
     */
    public BrokerPath broker() {
        if (_broker == null)
            _broker = new BrokerPath(this, Keys.BROKER_DEGREE__BROKER_DEGREE_BROKER_ID_FKEY, null);

        return _broker;
    }

    private transient DegreeBeforePath _degreeBefore;

    /**
     * Get the implicit join path to the <code>public.degree_before</code>
     * table.
     */
    public DegreeBeforePath degreeBefore() {
        if (_degreeBefore == null)
            _degreeBefore = new DegreeBeforePath(this, Keys.BROKER_DEGREE__BROKER_DEGREE_DEGREE_NAME_FKEY, null);

        return _degreeBefore;
    }

    @Override
    public BrokerDegree as(String alias) {
        return new BrokerDegree(DSL.name(alias), this);
    }

    @Override
    public BrokerDegree as(Name alias) {
        return new BrokerDegree(alias, this);
    }

    @Override
    public BrokerDegree as(Table<?> alias) {
        return new BrokerDegree(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BrokerDegree rename(String name) {
        return new BrokerDegree(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BrokerDegree rename(Name name) {
        return new BrokerDegree(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BrokerDegree rename(Table<?> name) {
        return new BrokerDegree(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BrokerDegree where(Condition condition) {
        return new BrokerDegree(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BrokerDegree where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BrokerDegree where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BrokerDegree where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BrokerDegree where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BrokerDegree where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BrokerDegree where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BrokerDegree where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BrokerDegree whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BrokerDegree whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
