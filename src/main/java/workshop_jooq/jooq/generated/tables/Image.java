/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import jooq.generated.Indexes;
import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.Property.PropertyPath;
import jooq.generated.tables.records.ImageRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Image extends TableImpl<ImageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.image</code>
     */
    public static final Image IMAGE = new Image();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImageRecord> getRecordType() {
        return ImageRecord.class;
    }

    /**
     * The column <code>public.image.id</code>.
     */
    public final TableField<ImageRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.image.property_id</code>.
     */
    public final TableField<ImageRecord, UUID> PROPERTY_ID = createField(DSL.name("property_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.image.image_url</code>.
     */
    public final TableField<ImageRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.image.is_main</code>.
     */
    public final TableField<ImageRecord, Boolean> IS_MAIN = createField(DSL.name("is_main"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.image.created_at</code>.
     */
    public final TableField<ImageRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Image(Name alias, Table<ImageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Image(Name alias, Table<ImageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.image</code> table reference
     */
    public Image(String alias) {
        this(DSL.name(alias), IMAGE);
    }

    /**
     * Create an aliased <code>public.image</code> table reference
     */
    public Image(Name alias) {
        this(alias, IMAGE);
    }

    /**
     * Create a <code>public.image</code> table reference
     */
    public Image() {
        this(DSL.name("image"), null);
    }

    public <O extends Record> Image(Table<O> path, ForeignKey<O, ImageRecord> childPath, InverseForeignKey<O, ImageRecord> parentPath) {
        super(path, childPath, parentPath, IMAGE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ImagePath extends Image implements Path<ImageRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ImagePath(Table<O> path, ForeignKey<O, ImageRecord> childPath, InverseForeignKey<O, ImageRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ImagePath(Name alias, Table<ImageRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ImagePath as(String alias) {
            return new ImagePath(DSL.name(alias), this);
        }

        @Override
        public ImagePath as(Name alias) {
            return new ImagePath(alias, this);
        }

        @Override
        public ImagePath as(Table<?> alias) {
            return new ImagePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_PROPERTY_IMAGE_PROPERTY_ID);
    }

    @Override
    public UniqueKey<ImageRecord> getPrimaryKey() {
        return Keys.IMAGE_PKEY;
    }

    @Override
    public List<ForeignKey<ImageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.IMAGE__IMAGE_PROPERTY_ID_FKEY);
    }

    private transient PropertyPath _property;

    /**
     * Get the implicit join path to the <code>public.property</code> table.
     */
    public PropertyPath property() {
        if (_property == null)
            _property = new PropertyPath(this, Keys.IMAGE__IMAGE_PROPERTY_ID_FKEY, null);

        return _property;
    }

    @Override
    public Image as(String alias) {
        return new Image(DSL.name(alias), this);
    }

    @Override
    public Image as(Name alias) {
        return new Image(alias, this);
    }

    @Override
    public Image as(Table<?> alias) {
        return new Image(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Image rename(String name) {
        return new Image(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Image rename(Name name) {
        return new Image(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Image rename(Table<?> name) {
        return new Image(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Image where(Condition condition) {
        return new Image(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Image where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Image where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Image where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Image where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Image where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Image where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Image where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Image whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Image whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
